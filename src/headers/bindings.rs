/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    storage: Storage,
    align: [Align; 0],
}

impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }

    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];

        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };

        let mask = 1 << bit_index;

        byte & mask == mask
    }

    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];

        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };

        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }

    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        let mut val = 0;

        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }

        val
    }

    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201505;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 23;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __ENUM_IDTYPE_T: u32 = 1;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const _SIGSET_H_types: u32 = 1;
pub const __timespec_defined: u32 = 1;
pub const _STRUCT_TIMEVAL: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _SYS_SYSMACROS_H: u32 = 1;
pub const _BITS_PTHREADTYPES_H: u32 = 1;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __have_pthread_attr_t: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const TMW_BITS_PER_INT: u32 = 32;
pub const TMW_BITS_PER_LONG: i32 = -1;
pub const TMW_BITS_PER_SHRT: u32 = 16;
pub const TMW_BITS_PER_SCHAR: u32 = 8;
pub const TMW_CHAR_SIGNED: u32 = 1;
pub const FMT64: &'static [u8; 2usize] = b"l\0";
pub const FMT_SIZE_T: &'static [u8; 2usize] = b"z\0";
pub const FMT_PTRDIFF_T: &'static [u8; 2usize] = b"t\0";
pub const false_: u32 = 0;
pub const true_: u32 = 1;
pub const TMW_NAME_LENGTH_MAX: u32 = 64;
pub const MWSIZE_MAX: u64 = 281474976710655;
pub const MWINDEX_MAX: u64 = 281474976710655;
pub const MWSINDEX_MAX: u64 = 281474976710655;
pub const MWSINDEX_MIN: i64 = -281474976710655;
pub const MWSIZE_MIN: u32 = 0;
pub const MWINDEX_MIN: u32 = 0;
pub const mxMAXNAM: u32 = 64;
pub const _ASSERT_H: u32 = 1;
pub const MEX_INFORMATION_VERSION: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const _G_config_h: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _G_HAVE_MMAP: u32 = 1;
pub const _G_HAVE_MREMAP: u32 = 1;
pub const _G_IO_IO_FILE_VERSION: u32 = 131073;
pub const _G_BUFSIZ: u32 = 8192;
pub const _IO_BUFSIZ: u32 = 8192;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _IO_UNIFIED_JUMPTABLES: u32 = 1;
pub const EOF: i32 = -1;
pub const _IOS_INPUT: u32 = 1;
pub const _IOS_OUTPUT: u32 = 2;
pub const _IOS_ATEND: u32 = 4;
pub const _IOS_APPEND: u32 = 8;
pub const _IOS_TRUNC: u32 = 16;
pub const _IOS_NOCREATE: u32 = 32;
pub const _IOS_NOREPLACE: u32 = 64;
pub const _IOS_BIN: u32 = 128;
pub const _IO_MAGIC: u32 = 4222418944;
pub const _OLD_STDIO_MAGIC: u32 = 4206624768;
pub const _IO_MAGIC_MASK: u32 = 4294901760;
pub const _IO_USER_BUF: u32 = 1;
pub const _IO_UNBUFFERED: u32 = 2;
pub const _IO_NO_READS: u32 = 4;
pub const _IO_NO_WRITES: u32 = 8;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_DELETE_DONT_CLOSE: u32 = 64;
pub const _IO_LINKED: u32 = 128;
pub const _IO_IN_BACKUP: u32 = 256;
pub const _IO_LINE_BUF: u32 = 512;
pub const _IO_TIED_PUT_GET: u32 = 1024;
pub const _IO_CURRENTLY_PUTTING: u32 = 2048;
pub const _IO_IS_APPENDING: u32 = 4096;
pub const _IO_IS_FILEBUF: u32 = 8192;
pub const _IO_BAD_SEEN: u32 = 16384;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IO_FLAGS2_MMAP: u32 = 1;
pub const _IO_FLAGS2_NOTCANCEL: u32 = 2;
pub const _IO_FLAGS2_USER_WBUF: u32 = 8;
pub const _IO_SKIPWS: u32 = 1;
pub const _IO_LEFT: u32 = 2;
pub const _IO_RIGHT: u32 = 4;
pub const _IO_INTERNAL: u32 = 8;
pub const _IO_DEC: u32 = 16;
pub const _IO_OCT: u32 = 32;
pub const _IO_HEX: u32 = 64;
pub const _IO_SHOWBASE: u32 = 128;
pub const _IO_SHOWPOINT: u32 = 256;
pub const _IO_UPPERCASE: u32 = 512;
pub const _IO_SHOWPOS: u32 = 1024;
pub const _IO_SCIENTIFIC: u32 = 2048;
pub const _IO_FIXED: u32 = 4096;
pub const _IO_UNITBUF: u32 = 8192;
pub const _IO_STDIO: u32 = 16384;
pub const _IO_DONT_CLOSE: u32 = 32768;
pub const _IO_BOOLALPHA: u32 = 65536;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct impl_info_tag {
    _unused: [u8; 0],
}
pub type MEX_impl_info = *mut impl_info_tag;
pub type wchar_t = ::std::os::raw::c_int;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = u32;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub w_status: ::std::os::raw::c_int,
    pub __wait_terminated: wait__bindgen_ty_1,
    pub __wait_stopped: wait__bindgen_ty_2,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u8>,
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_1))
    );
}
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn __w_termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set___w_termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn __w_coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___w_coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __w_retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set___w_retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __w_termsig: ::std::os::raw::c_uint,
        __w_coredump: ::std::os::raw::c_uint,
        __w_retcode: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let __w_termsig: u32 = unsafe { ::std::mem::transmute(__w_termsig) };
            __w_termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let __w_coredump: u32 = unsafe { ::std::mem::transmute(__w_coredump) };
            __w_coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let __w_retcode: u32 = unsafe { ::std::mem::transmute(__w_retcode) };
            __w_retcode as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u8>,
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_2))
    );
}
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn __w_stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set___w_stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn __w_stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set___w_stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __w_stopval: ::std::os::raw::c_uint,
        __w_stopsig: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let __w_stopval: u32 = unsafe { ::std::mem::transmute(__w_stopval) };
            __w_stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let __w_stopsig: u32 = unsafe { ::std::mem::transmute(__w_stopsig) };
            __w_stopsig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_wait() {
    assert_eq!(
        ::std::mem::size_of::<wait>(),
        4usize,
        concat!("Size of: ", stringify!(wait))
    );
    assert_eq!(
        ::std::mem::align_of::<wait>(),
        4usize,
        concat!("Alignment of ", stringify!(wait))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __WAIT_STATUS {
    pub __uptr: *mut wait,
    pub __iptr: *mut ::std::os::raw::c_int,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout___WAIT_STATUS() {
    assert_eq!(
        ::std::mem::size_of::<__WAIT_STATUS>(),
        8usize,
        concat!("Size of: ", stringify!(__WAIT_STATUS))
    );
    assert_eq!(
        ::std::mem::align_of::<__WAIT_STATUS>(),
        8usize,
        concat!("Alignment of ", stringify!(__WAIT_STATUS))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
}
extern "C" {
    #[link_name = "\u{1}_Z22__ctype_get_mb_cur_max"]
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    #[link_name = "\u{1}_Z4atof"]
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_Z4atoi"]
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z4atol"]
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_Z5atoll"]
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}_Z6strtod"]
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_Z6strtof"]
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_Z7strtold"]
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_Z6strtol"]
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_Z7strtoul"]
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_Z6strtoq"]
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}_Z7strtouq"]
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    #[link_name = "\u{1}_Z7strtoll"]
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}_Z8strtoull"]
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    #[link_name = "\u{1}_Z4l64a"]
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z4a64l"]
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    #[link_name = "\u{1}_Z6select"]
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z7pselect"]
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z13gnu_dev_major"]
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_Z13gnu_dev_minor"]
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_Z15gnu_dev_makedev"]
    pub fn gnu_dev_makedev(
        __major: ::std::os::raw::c_uint,
        __minor: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: pthread_mutex_t___pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_mutex_t___pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t___pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t___pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t___pthread_mutex_s>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pthread_mutex_t___pthread_mutex_s)
        )
    );
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: pthread_cond_t__bindgen_ty_1,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_cond_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t__bindgen_ty_1))
    );
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: pthread_rwlock_t__bindgen_ty_1,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_rwlock_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t__bindgen_ty_1>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t__bindgen_ty_1))
    );
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
}
extern "C" {
    #[link_name = "\u{1}_Z6random"]
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_Z7srandom"]
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    #[link_name = "\u{1}_Z9initstate"]
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z8setstate"]
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
}
extern "C" {
    #[link_name = "\u{1}_Z8random_r"]
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z9srandom_r"]
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z11initstate_r"]
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z10setstate_r"]
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z4rand"]
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z5srand"]
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    #[link_name = "\u{1}_Z6rand_r"]
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z7drand48"]
    pub fn drand48() -> f64;
}
extern "C" {
    #[link_name = "\u{1}_Z7erand48"]
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_Z7lrand48"]
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_Z7nrand48"]
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_Z7mrand48"]
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_Z7jrand48"]
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_Z7srand48"]
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    #[link_name = "\u{1}_Z6seed48"]
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    #[link_name = "\u{1}_Z7lcong48"]
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
}
extern "C" {
    #[link_name = "\u{1}_Z9drand48_r"]
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z9erand48_r"]
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z9lrand48_r"]
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z9nrand48_r"]
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z9mrand48_r"]
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z9jrand48_r"]
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z9srand48_r"]
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z8seed48_r"]
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z9lcong48_r"]
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z6malloc"]
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_Z6calloc"]
    pub fn calloc(__nmemb: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_Z7realloc"]
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_Z4free"]
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_Z5cfree"]
    pub fn cfree(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_Z6alloca"]
    pub fn alloca(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_Z6valloc"]
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_Z14posix_memalign"]
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z13aligned_alloc"]
    pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_Z5abort"]
    pub fn abort();
}
extern "C" {
    #[link_name = "\u{1}_Z6atexit"]
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z13at_quick_exit"]
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z7on_exit"]
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z4exit"]
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_Z10quick_exit"]
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_Z5_Exit"]
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_Z6getenv"]
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z6putenv"]
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z6setenv"]
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z8unsetenv"]
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z8clearenv"]
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z6mktemp"]
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z7mkstemp"]
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z8mkstemps"]
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z7mkdtemp"]
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z6system"]
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z8realpath"]
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void, arg2: *const ::std::os::raw::c_void)
        -> ::std::os::raw::c_int,
>;
extern "C" {
    #[link_name = "\u{1}_Z7bsearch"]
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_Z5qsort"]
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z3abs"]
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z4labs"]
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_Z5llabs"]
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}_Z3div"]
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    #[link_name = "\u{1}_Z4ldiv"]
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    #[link_name = "\u{1}_Z5lldiv"]
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    #[link_name = "\u{1}_Z4ecvt"]
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z4fcvt"]
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z4gcvt"]
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z5qecvt"]
    pub fn qecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z5qfcvt"]
    pub fn qfcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z5qgcvt"]
    pub fn qgcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z6ecvt_r"]
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z6fcvt_r"]
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z7qecvt_r"]
    pub fn qecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z7qfcvt_r"]
    pub fn qfcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z5mblen"]
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z6mbtowc"]
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z6wctomb"]
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z8mbstowcs"]
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_Z8wcstombs"]
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_Z7rpmatch"]
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z9getsubopt"]
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z10getloadavg"]
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: f64,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
}
pub type uchar_T = ::std::os::raw::c_uchar;
pub type ushort_T = ::std::os::raw::c_ushort;
pub type ulong_T = ::std::os::raw::c_ulong;
pub type ulonglong_T = ::std::os::raw::c_ulonglong;
pub type int8_T = ::std::os::raw::c_schar;
pub type uint8_T = ::std::os::raw::c_uchar;
pub type int16_T = ::std::os::raw::c_short;
pub type uint16_T = ::std::os::raw::c_ushort;
pub type int32_T = ::std::os::raw::c_int;
pub type uint32_T = ::std::os::raw::c_uint;
pub type real32_T = f32;
pub type real64_T = f64;
pub type int64_T = ::std::os::raw::c_long;
pub type uint64_T = ::std::os::raw::c_ulong;
pub type real_T = real64_T;
pub type time_T = real_T;
pub type boolean_T = ::std::os::raw::c_uchar;
pub type char_T = ::std::os::raw::c_char;
pub type int_T = ::std::os::raw::c_int;
pub type uint_T = ::std::os::raw::c_uint;
pub type byte_T = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct creal32_T {
    pub re: real32_T,
    pub im: real32_T,
}
#[test]
fn bindgen_test_layout_creal32_T() {
    assert_eq!(
        ::std::mem::size_of::<creal32_T>(),
        8usize,
        concat!("Size of: ", stringify!(creal32_T))
    );
    assert_eq!(
        ::std::mem::align_of::<creal32_T>(),
        4usize,
        concat!("Alignment of ", stringify!(creal32_T))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct creal64_T {
    pub re: real64_T,
    pub im: real64_T,
}
#[test]
fn bindgen_test_layout_creal64_T() {
    assert_eq!(
        ::std::mem::size_of::<creal64_T>(),
        16usize,
        concat!("Size of: ", stringify!(creal64_T))
    );
    assert_eq!(
        ::std::mem::align_of::<creal64_T>(),
        8usize,
        concat!("Alignment of ", stringify!(creal64_T))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct creal_T {
    pub re: real_T,
    pub im: real_T,
}
#[test]
fn bindgen_test_layout_creal_T() {
    assert_eq!(
        ::std::mem::size_of::<creal_T>(),
        16usize,
        concat!("Size of: ", stringify!(creal_T))
    );
    assert_eq!(
        ::std::mem::align_of::<creal_T>(),
        8usize,
        concat!("Alignment of ", stringify!(creal_T))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cint8_T {
    pub re: int8_T,
    pub im: int8_T,
}
#[test]
fn bindgen_test_layout_cint8_T() {
    assert_eq!(
        ::std::mem::size_of::<cint8_T>(),
        2usize,
        concat!("Size of: ", stringify!(cint8_T))
    );
    assert_eq!(
        ::std::mem::align_of::<cint8_T>(),
        1usize,
        concat!("Alignment of ", stringify!(cint8_T))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cuint8_T {
    pub re: uint8_T,
    pub im: uint8_T,
}
#[test]
fn bindgen_test_layout_cuint8_T() {
    assert_eq!(
        ::std::mem::size_of::<cuint8_T>(),
        2usize,
        concat!("Size of: ", stringify!(cuint8_T))
    );
    assert_eq!(
        ::std::mem::align_of::<cuint8_T>(),
        1usize,
        concat!("Alignment of ", stringify!(cuint8_T))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cint16_T {
    pub re: int16_T,
    pub im: int16_T,
}
#[test]
fn bindgen_test_layout_cint16_T() {
    assert_eq!(
        ::std::mem::size_of::<cint16_T>(),
        4usize,
        concat!("Size of: ", stringify!(cint16_T))
    );
    assert_eq!(
        ::std::mem::align_of::<cint16_T>(),
        2usize,
        concat!("Alignment of ", stringify!(cint16_T))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cuint16_T {
    pub re: uint16_T,
    pub im: uint16_T,
}
#[test]
fn bindgen_test_layout_cuint16_T() {
    assert_eq!(
        ::std::mem::size_of::<cuint16_T>(),
        4usize,
        concat!("Size of: ", stringify!(cuint16_T))
    );
    assert_eq!(
        ::std::mem::align_of::<cuint16_T>(),
        2usize,
        concat!("Alignment of ", stringify!(cuint16_T))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cint32_T {
    pub re: int32_T,
    pub im: int32_T,
}
#[test]
fn bindgen_test_layout_cint32_T() {
    assert_eq!(
        ::std::mem::size_of::<cint32_T>(),
        8usize,
        concat!("Size of: ", stringify!(cint32_T))
    );
    assert_eq!(
        ::std::mem::align_of::<cint32_T>(),
        4usize,
        concat!("Alignment of ", stringify!(cint32_T))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cuint32_T {
    pub re: uint32_T,
    pub im: uint32_T,
}
#[test]
fn bindgen_test_layout_cuint32_T() {
    assert_eq!(
        ::std::mem::size_of::<cuint32_T>(),
        8usize,
        concat!("Size of: ", stringify!(cuint32_T))
    );
    assert_eq!(
        ::std::mem::align_of::<cuint32_T>(),
        4usize,
        concat!("Alignment of ", stringify!(cuint32_T))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cint64_T {
    pub re: int64_T,
    pub im: int64_T,
}
#[test]
fn bindgen_test_layout_cint64_T() {
    assert_eq!(
        ::std::mem::size_of::<cint64_T>(),
        16usize,
        concat!("Size of: ", stringify!(cint64_T))
    );
    assert_eq!(
        ::std::mem::align_of::<cint64_T>(),
        8usize,
        concat!("Alignment of ", stringify!(cint64_T))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cuint64_T {
    pub re: uint64_T,
    pub im: uint64_T,
}
#[test]
fn bindgen_test_layout_cuint64_T() {
    assert_eq!(
        ::std::mem::size_of::<cuint64_T>(),
        16usize,
        concat!("Size of: ", stringify!(cuint64_T))
    );
    assert_eq!(
        ::std::mem::align_of::<cuint64_T>(),
        8usize,
        concat!("Alignment of ", stringify!(cuint64_T))
    );
}
pub type bool_ = boolean_T;
pub type mwSize = usize;
pub type mwIndex = usize;
pub type mwSignedIndex = isize;
pub type CHAR16_T = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mxArray_tag {
    _unused: [u8; 0],
}
pub type mxArray = mxArray_tag;
pub type mxFunctionPtr = ::std::option::Option<
    unsafe extern "C" fn(
        nlhs: ::std::os::raw::c_int,
        plhs: *mut *mut mxArray,
        nrhs: ::std::os::raw::c_int,
        prhs: *mut *mut mxArray,
    ),
>;
pub type mxLogical = bool_;
pub type mxChar = CHAR16_T;
pub const mxClassID_mxUNKNOWN_CLASS: mxClassID = 0;
pub const mxClassID_mxCELL_CLASS: mxClassID = 1;
pub const mxClassID_mxSTRUCT_CLASS: mxClassID = 2;
pub const mxClassID_mxLOGICAL_CLASS: mxClassID = 3;
pub const mxClassID_mxCHAR_CLASS: mxClassID = 4;
pub const mxClassID_mxVOID_CLASS: mxClassID = 5;
pub const mxClassID_mxDOUBLE_CLASS: mxClassID = 6;
pub const mxClassID_mxSINGLE_CLASS: mxClassID = 7;
pub const mxClassID_mxINT8_CLASS: mxClassID = 8;
pub const mxClassID_mxUINT8_CLASS: mxClassID = 9;
pub const mxClassID_mxINT16_CLASS: mxClassID = 10;
pub const mxClassID_mxUINT16_CLASS: mxClassID = 11;
pub const mxClassID_mxINT32_CLASS: mxClassID = 12;
pub const mxClassID_mxUINT32_CLASS: mxClassID = 13;
pub const mxClassID_mxINT64_CLASS: mxClassID = 14;
pub const mxClassID_mxUINT64_CLASS: mxClassID = 15;
pub const mxClassID_mxFUNCTION_CLASS: mxClassID = 16;
pub const mxClassID_mxOPAQUE_CLASS: mxClassID = 17;
pub const mxClassID_mxOBJECT_CLASS: mxClassID = 18;
pub const mxClassID_mxINDEX_CLASS: mxClassID = 15;
pub const mxClassID_mxSPARSE_CLASS: mxClassID = 5;
pub type mxClassID = u32;
pub const mxComplexity_mxREAL: mxComplexity = 0;
pub const mxComplexity_mxCOMPLEX: mxComplexity = 1;
pub type mxComplexity = u32;
extern "C" {
    #[link_name = "\u{1}_Z8mxMalloc"]
    pub fn mxMalloc(n: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_Z8mxCalloc"]
    pub fn mxCalloc(n: usize, size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_Z6mxFree"]
    pub fn mxFree(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_Z9mxRealloc"]
    pub fn mxRealloc(ptr: *mut ::std::os::raw::c_void, size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_Z23mxGetNumberOfDimensions"]
    pub fn mxGetNumberOfDimensions(pa: *const mxArray) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_Z27mxGetNumberOfDimensions_700"]
    pub fn mxGetNumberOfDimensions_700(pa: *const mxArray) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z15mxGetDimensions"]
    pub fn mxGetDimensions(pa: *const mxArray) -> *const usize;
}
extern "C" {
    #[link_name = "\u{1}_Z19mxGetDimensions_700"]
    pub fn mxGetDimensions_700(pa: *const mxArray) -> *const ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z6mxGetM"]
    pub fn mxGetM(pa: *const mxArray) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_Z7mxGetIr"]
    pub fn mxGetIr(pa: *const mxArray) -> *mut usize;
}
extern "C" {
    #[link_name = "\u{1}_Z11mxGetIr_700"]
    pub fn mxGetIr_700(pa: *const mxArray) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z7mxGetJc"]
    pub fn mxGetJc(pa: *const mxArray) -> *mut usize;
}
extern "C" {
    #[link_name = "\u{1}_Z11mxGetJc_700"]
    pub fn mxGetJc_700(pa: *const mxArray) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z10mxGetNzmax"]
    pub fn mxGetNzmax(pa: *const mxArray) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_Z14mxGetNzmax_700"]
    pub fn mxGetNzmax_700(pa: *const mxArray) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z10mxSetNzmax"]
    pub fn mxSetNzmax(pa: *mut mxArray, nzmax: usize);
}
extern "C" {
    #[link_name = "\u{1}_Z14mxSetNzmax_700"]
    pub fn mxSetNzmax_700(pa: *mut mxArray, nzmax: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_Z22mxGetFieldNameByNumber"]
    pub fn mxGetFieldNameByNumber(
        pa: *const mxArray,
        n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z18mxGetFieldByNumber"]
    pub fn mxGetFieldByNumber(
        pa: *const mxArray,
        i: usize,
        fieldnum: ::std::os::raw::c_int,
    ) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z22mxGetFieldByNumber_700"]
    pub fn mxGetFieldByNumber_700(
        pa: *const mxArray,
        i: ::std::os::raw::c_int,
        fieldnum: ::std::os::raw::c_int,
    ) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z9mxGetCell"]
    pub fn mxGetCell(pa: *const mxArray, i: usize) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z13mxGetCell_700"]
    pub fn mxGetCell_700(pa: *const mxArray, i: ::std::os::raw::c_int) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z12mxGetClassID"]
    pub fn mxGetClassID(pa: *const mxArray) -> mxClassID;
}
extern "C" {
    #[link_name = "\u{1}_Z9mxGetData"]
    pub fn mxGetData(pa: *const mxArray) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_Z9mxSetData"]
    pub fn mxSetData(pa: *mut mxArray, newdata: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_Z11mxIsNumeric"]
    pub fn mxIsNumeric(pa: *const mxArray) -> bool_;
}
extern "C" {
    #[link_name = "\u{1}_Z8mxIsCell"]
    pub fn mxIsCell(pa: *const mxArray) -> bool_;
}
extern "C" {
    #[link_name = "\u{1}_Z11mxIsLogical"]
    pub fn mxIsLogical(pa: *const mxArray) -> bool_;
}
extern "C" {
    #[link_name = "\u{1}_Z10mxIsScalar"]
    pub fn mxIsScalar(pa: *const mxArray) -> bool_;
}
extern "C" {
    #[link_name = "\u{1}_Z8mxIsChar"]
    pub fn mxIsChar(pa: *const mxArray) -> bool_;
}
extern "C" {
    #[link_name = "\u{1}_Z10mxIsStruct"]
    pub fn mxIsStruct(pa: *const mxArray) -> bool_;
}
extern "C" {
    #[link_name = "\u{1}_Z10mxIsOpaque"]
    pub fn mxIsOpaque(pa: *const mxArray) -> bool_;
}
extern "C" {
    #[link_name = "\u{1}_Z18mxIsFunctionHandle"]
    pub fn mxIsFunctionHandle(pa: *const mxArray) -> bool_;
}
extern "C" {
    #[link_name = "\u{1}_Z10mxIsObject"]
    pub fn mxIsObject(pa: *const mxArray) -> bool_;
}
extern "C" {
    #[link_name = "\u{1}_Z13mxGetImagData"]
    pub fn mxGetImagData(pa: *const mxArray) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_Z13mxSetImagData"]
    pub fn mxSetImagData(pa: *mut mxArray, newdata: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_Z11mxIsComplex"]
    pub fn mxIsComplex(pa: *const mxArray) -> bool_;
}
extern "C" {
    #[link_name = "\u{1}_Z10mxIsSparse"]
    pub fn mxIsSparse(pa: *const mxArray) -> bool_;
}
extern "C" {
    #[link_name = "\u{1}_Z10mxIsDouble"]
    pub fn mxIsDouble(pa: *const mxArray) -> bool_;
}
extern "C" {
    #[link_name = "\u{1}_Z10mxIsSingle"]
    pub fn mxIsSingle(pa: *const mxArray) -> bool_;
}
extern "C" {
    #[link_name = "\u{1}_Z8mxIsInt8"]
    pub fn mxIsInt8(pa: *const mxArray) -> bool_;
}
extern "C" {
    #[link_name = "\u{1}_Z9mxIsUint8"]
    pub fn mxIsUint8(pa: *const mxArray) -> bool_;
}
extern "C" {
    #[link_name = "\u{1}_Z9mxIsInt16"]
    pub fn mxIsInt16(pa: *const mxArray) -> bool_;
}
extern "C" {
    #[link_name = "\u{1}_Z10mxIsUint16"]
    pub fn mxIsUint16(pa: *const mxArray) -> bool_;
}
extern "C" {
    #[link_name = "\u{1}_Z9mxIsInt32"]
    pub fn mxIsInt32(pa: *const mxArray) -> bool_;
}
extern "C" {
    #[link_name = "\u{1}_Z10mxIsUint32"]
    pub fn mxIsUint32(pa: *const mxArray) -> bool_;
}
extern "C" {
    #[link_name = "\u{1}_Z9mxIsInt64"]
    pub fn mxIsInt64(pa: *const mxArray) -> bool_;
}
extern "C" {
    #[link_name = "\u{1}_Z10mxIsUint64"]
    pub fn mxIsUint64(pa: *const mxArray) -> bool_;
}
extern "C" {
    #[link_name = "\u{1}_Z21mxGetNumberOfElements"]
    pub fn mxGetNumberOfElements(pa: *const mxArray) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_Z7mxGetPr"]
    pub fn mxGetPr(pa: *const mxArray) -> *mut f64;
}
extern "C" {
    #[link_name = "\u{1}_Z7mxSetPr"]
    pub fn mxSetPr(pa: *mut mxArray, pr: *mut f64);
}
extern "C" {
    #[link_name = "\u{1}_Z7mxGetPi"]
    pub fn mxGetPi(pa: *const mxArray) -> *mut f64;
}
extern "C" {
    #[link_name = "\u{1}_Z7mxSetPi"]
    pub fn mxSetPi(pa: *mut mxArray, pi: *mut f64);
}
extern "C" {
    #[link_name = "\u{1}_Z10mxGetChars"]
    pub fn mxGetChars(pa: *const mxArray) -> *mut mxChar;
}
extern "C" {
    #[link_name = "\u{1}_Z13mxGetUserBits"]
    pub fn mxGetUserBits(pa: *const mxArray) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z13mxSetUserBits"]
    pub fn mxSetUserBits(pa: *mut mxArray, value: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_Z11mxGetScalar"]
    pub fn mxGetScalar(pa: *const mxArray) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_Z16mxIsFromGlobalWS"]
    pub fn mxIsFromGlobalWS(pa: *const mxArray) -> bool_;
}
extern "C" {
    #[link_name = "\u{1}_Z17mxSetFromGlobalWS"]
    pub fn mxSetFromGlobalWS(pa: *mut mxArray, global: bool_);
}
extern "C" {
    #[link_name = "\u{1}_Z6mxSetM"]
    pub fn mxSetM(pa: *mut mxArray, m: usize);
}
extern "C" {
    #[link_name = "\u{1}_Z10mxSetM_700"]
    pub fn mxSetM_700(pa: *mut mxArray, m: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_Z6mxGetN"]
    pub fn mxGetN(pa: *const mxArray) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_Z9mxIsEmpty"]
    pub fn mxIsEmpty(pa: *const mxArray) -> bool_;
}
extern "C" {
    #[link_name = "\u{1}_Z16mxGetFieldNumber"]
    pub fn mxGetFieldNumber(
        pa: *const mxArray,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z7mxSetIr"]
    pub fn mxSetIr(pa: *mut mxArray, newir: *mut usize);
}
extern "C" {
    #[link_name = "\u{1}_Z11mxSetIr_700"]
    pub fn mxSetIr_700(pa: *mut mxArray, newir: *mut ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_Z7mxSetJc"]
    pub fn mxSetJc(pa: *mut mxArray, newjc: *mut usize);
}
extern "C" {
    #[link_name = "\u{1}_Z11mxSetJc_700"]
    pub fn mxSetJc_700(pa: *mut mxArray, newjc: *mut ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_Z16mxGetElementSize"]
    pub fn mxGetElementSize(pa: *const mxArray) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_Z21mxCalcSingleSubscript"]
    pub fn mxCalcSingleSubscript(pa: *const mxArray, nsubs: usize, subs: *const usize) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_Z25mxCalcSingleSubscript_700"]
    pub fn mxCalcSingleSubscript_700(
        pa: *const mxArray,
        nsubs: ::std::os::raw::c_int,
        subs: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z19mxGetNumberOfFields"]
    pub fn mxGetNumberOfFields(pa: *const mxArray) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z9mxSetCell"]
    pub fn mxSetCell(pa: *mut mxArray, i: usize, value: *mut mxArray);
}
extern "C" {
    #[link_name = "\u{1}_Z13mxSetCell_700"]
    pub fn mxSetCell_700(pa: *mut mxArray, i: ::std::os::raw::c_int, value: *mut mxArray);
}
extern "C" {
    #[link_name = "\u{1}_Z18mxSetFieldByNumber"]
    pub fn mxSetFieldByNumber(
        pa: *mut mxArray,
        i: usize,
        fieldnum: ::std::os::raw::c_int,
        value: *mut mxArray,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z22mxSetFieldByNumber_700"]
    pub fn mxSetFieldByNumber_700(
        pa: *mut mxArray,
        i: ::std::os::raw::c_int,
        fieldnum: ::std::os::raw::c_int,
        value: *mut mxArray,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z10mxGetField"]
    pub fn mxGetField(
        pa: *const mxArray,
        i: usize,
        fieldname: *const ::std::os::raw::c_char,
    ) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z14mxGetField_700"]
    pub fn mxGetField_700(
        pa: *const mxArray,
        i: ::std::os::raw::c_int,
        fieldname: *const ::std::os::raw::c_char,
    ) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z10mxSetField"]
    pub fn mxSetField(
        pa: *mut mxArray,
        i: usize,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut mxArray,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z14mxSetField_700"]
    pub fn mxSetField_700(
        pa: *mut mxArray,
        i: ::std::os::raw::c_int,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut mxArray,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z13mxGetProperty"]
    pub fn mxGetProperty(
        pa: *const mxArray,
        i: usize,
        propname: *const ::std::os::raw::c_char,
    ) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z17mxGetProperty_700"]
    pub fn mxGetProperty_700(
        pa: *const mxArray,
        i: ::std::os::raw::c_int,
        propname: *const ::std::os::raw::c_char,
    ) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z13mxSetProperty"]
    pub fn mxSetProperty(
        pa: *mut mxArray,
        i: usize,
        propname: *const ::std::os::raw::c_char,
        value: *const mxArray,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z17mxSetProperty_700"]
    pub fn mxSetProperty_700(
        pa: *mut mxArray,
        i: ::std::os::raw::c_int,
        propname: *const ::std::os::raw::c_char,
        value: *const mxArray,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z14mxGetClassName"]
    pub fn mxGetClassName(pa: *const mxArray) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z9mxIsClass"]
    pub fn mxIsClass(pa: *const mxArray, name: *const ::std::os::raw::c_char) -> bool_;
}
extern "C" {
    #[link_name = "\u{1}_Z21mxCreateNumericMatrix"]
    pub fn mxCreateNumericMatrix(
        m: usize,
        n: usize,
        classid: mxClassID,
        flag: mxComplexity,
    ) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z25mxCreateNumericMatrix_700"]
    pub fn mxCreateNumericMatrix_700(
        m: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
        classid: mxClassID,
        flag: mxComplexity,
    ) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z27mxCreateUninitNumericMatrix"]
    pub fn mxCreateUninitNumericMatrix(
        m: usize,
        n: usize,
        classid: mxClassID,
        flag: mxComplexity,
    ) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z26mxCreateUninitNumericArray"]
    pub fn mxCreateUninitNumericArray(
        ndim: usize,
        dims: *mut usize,
        classid: mxClassID,
        flag: mxComplexity,
    ) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z6mxSetN"]
    pub fn mxSetN(pa: *mut mxArray, n: usize);
}
extern "C" {
    #[link_name = "\u{1}_Z10mxSetN_700"]
    pub fn mxSetN_700(pa: *mut mxArray, n: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_Z15mxSetDimensions"]
    pub fn mxSetDimensions(
        pa: *mut mxArray,
        pdims: *const usize,
        ndims: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z19mxSetDimensions_700"]
    pub fn mxSetDimensions_700(
        pa: *mut mxArray,
        pdims: *const ::std::os::raw::c_int,
        ndims: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z14mxDestroyArray"]
    pub fn mxDestroyArray(pa: *mut mxArray);
}
extern "C" {
    #[link_name = "\u{1}_Z20mxCreateNumericArray"]
    pub fn mxCreateNumericArray(
        ndim: usize,
        dims: *const usize,
        classid: mxClassID,
        flag: mxComplexity,
    ) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z24mxCreateNumericArray_700"]
    pub fn mxCreateNumericArray_700(
        ndim: ::std::os::raw::c_int,
        dims: *const ::std::os::raw::c_int,
        classid: mxClassID,
        flag: mxComplexity,
    ) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z17mxCreateCharArray"]
    pub fn mxCreateCharArray(ndim: usize, dims: *const usize) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z21mxCreateCharArray_700"]
    pub fn mxCreateCharArray_700(
        ndim: ::std::os::raw::c_int,
        dims: *const ::std::os::raw::c_int,
    ) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z20mxCreateDoubleMatrix"]
    pub fn mxCreateDoubleMatrix(m: usize, n: usize, flag: mxComplexity) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z24mxCreateDoubleMatrix_700"]
    pub fn mxCreateDoubleMatrix_700(
        m: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
        flag: mxComplexity,
    ) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z13mxGetLogicals"]
    pub fn mxGetLogicals(pa: *const mxArray) -> *mut mxLogical;
}
extern "C" {
    #[link_name = "\u{1}_Z20mxCreateLogicalArray"]
    pub fn mxCreateLogicalArray(ndim: usize, dims: *const usize) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z24mxCreateLogicalArray_700"]
    pub fn mxCreateLogicalArray_700(
        ndim: ::std::os::raw::c_int,
        dims: *const ::std::os::raw::c_int,
    ) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z21mxCreateLogicalMatrix"]
    pub fn mxCreateLogicalMatrix(m: usize, n: usize) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z25mxCreateLogicalMatrix_700"]
    pub fn mxCreateLogicalMatrix_700(
        m: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z21mxCreateLogicalScalar"]
    pub fn mxCreateLogicalScalar(value: bool_) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z17mxIsLogicalScalar"]
    pub fn mxIsLogicalScalar(pa: *const mxArray) -> bool_;
}
extern "C" {
    #[link_name = "\u{1}_Z21mxIsLogicalScalarTrue"]
    pub fn mxIsLogicalScalarTrue(pa: *const mxArray) -> bool_;
}
extern "C" {
    #[link_name = "\u{1}_Z20mxCreateDoubleScalar"]
    pub fn mxCreateDoubleScalar(value: f64) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z14mxCreateSparse"]
    pub fn mxCreateSparse(m: usize, n: usize, nzmax: usize, flag: mxComplexity) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z18mxCreateSparse_700"]
    pub fn mxCreateSparse_700(
        m: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
        nzmax: ::std::os::raw::c_int,
        flag: mxComplexity,
    ) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z27mxCreateSparseLogicalMatrix"]
    pub fn mxCreateSparseLogicalMatrix(m: usize, n: usize, nzmax: usize) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z31mxCreateSparseLogicalMatrix_700"]
    pub fn mxCreateSparseLogicalMatrix_700(
        m: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
        nzmax: ::std::os::raw::c_int,
    ) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z11mxGetNChars"]
    pub fn mxGetNChars(pa: *const mxArray, buf: *mut ::std::os::raw::c_char, nChars: usize);
}
extern "C" {
    #[link_name = "\u{1}_Z15mxGetNChars_700"]
    pub fn mxGetNChars_700(
        pa: *const mxArray,
        buf: *mut ::std::os::raw::c_char,
        nChars: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z11mxGetString"]
    pub fn mxGetString(
        pa: *const mxArray,
        buf: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z15mxGetString_700"]
    pub fn mxGetString_700(
        pa: *const mxArray,
        buf: *mut ::std::os::raw::c_char,
        buflen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z15mxArrayToString"]
    pub fn mxArrayToString(pa: *const mxArray) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z19mxArrayToUTF8String"]
    pub fn mxArrayToUTF8String(pa: *const mxArray) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z24mxCreateStringFromNChars"]
    pub fn mxCreateStringFromNChars(str: *const ::std::os::raw::c_char, n: usize) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z28mxCreateStringFromNChars_700"]
    pub fn mxCreateStringFromNChars_700(
        str: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z14mxCreateString"]
    pub fn mxCreateString(str: *const ::std::os::raw::c_char) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z29mxCreateCharMatrixFromStrings"]
    pub fn mxCreateCharMatrixFromStrings(
        m: usize,
        str: *mut *const ::std::os::raw::c_char,
    ) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z33mxCreateCharMatrixFromStrings_700"]
    pub fn mxCreateCharMatrixFromStrings_700(
        m: ::std::os::raw::c_int,
        str: *mut *const ::std::os::raw::c_char,
    ) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z18mxCreateCellMatrix"]
    pub fn mxCreateCellMatrix(m: usize, n: usize) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z22mxCreateCellMatrix_700"]
    pub fn mxCreateCellMatrix_700(
        m: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z17mxCreateCellArray"]
    pub fn mxCreateCellArray(ndim: usize, dims: *const usize) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z21mxCreateCellArray_700"]
    pub fn mxCreateCellArray_700(
        ndim: ::std::os::raw::c_int,
        dims: *const ::std::os::raw::c_int,
    ) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z20mxCreateStructMatrix"]
    pub fn mxCreateStructMatrix(
        m: usize,
        n: usize,
        nfields: ::std::os::raw::c_int,
        fieldnames: *mut *const ::std::os::raw::c_char,
    ) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z24mxCreateStructMatrix_700"]
    pub fn mxCreateStructMatrix_700(
        m: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
        nfields: ::std::os::raw::c_int,
        fieldnames: *mut *const ::std::os::raw::c_char,
    ) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z19mxCreateStructArray"]
    pub fn mxCreateStructArray(
        ndim: usize,
        dims: *const usize,
        nfields: ::std::os::raw::c_int,
        fieldnames: *mut *const ::std::os::raw::c_char,
    ) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z23mxCreateStructArray_700"]
    pub fn mxCreateStructArray_700(
        ndim: ::std::os::raw::c_int,
        dims: *const ::std::os::raw::c_int,
        nfields: ::std::os::raw::c_int,
        fieldnames: *mut *const ::std::os::raw::c_char,
    ) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z16mxDuplicateArray"]
    pub fn mxDuplicateArray(in_: *const mxArray) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z14mxSetClassName"]
    pub fn mxSetClassName(
        pa: *mut mxArray,
        classname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z10mxAddField"]
    pub fn mxAddField(
        pa: *mut mxArray,
        fieldname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z13mxRemoveField"]
    pub fn mxRemoveField(pa: *mut mxArray, field: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_Z8mxGetEps"]
    pub fn mxGetEps() -> f64;
}
extern "C" {
    #[link_name = "\u{1}_Z8mxGetInf"]
    pub fn mxGetInf() -> f64;
}
extern "C" {
    #[link_name = "\u{1}_Z8mxGetNaN"]
    pub fn mxGetNaN() -> f64;
}
extern "C" {
    #[link_name = "\u{1}_Z10mxIsFinite"]
    pub fn mxIsFinite(x: f64) -> bool_;
}
extern "C" {
    #[link_name = "\u{1}_Z7mxIsInf"]
    pub fn mxIsInf(x: f64) -> bool_;
}
extern "C" {
    #[link_name = "\u{1}_Z7mxIsNaN"]
    pub fn mxIsNaN(x: f64) -> bool_;
}
extern "C" {
    #[link_name = "\u{1}_Z13__assert_fail"]
    pub fn __assert_fail(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z20__assert_perror_fail"]
    pub fn __assert_perror_fail(
        __errnum: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z8__assert"]
    pub fn __assert(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_int,
    );
}
pub type mex_exit_fn = ::std::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mexGlobalTableEntry_Tag {
    pub name: *const ::std::os::raw::c_char,
    pub variable: *mut *mut mxArray,
}
#[test]
fn bindgen_test_layout_mexGlobalTableEntry_Tag() {
    assert_eq!(
        ::std::mem::size_of::<mexGlobalTableEntry_Tag>(),
        16usize,
        concat!("Size of: ", stringify!(mexGlobalTableEntry_Tag))
    );
    assert_eq!(
        ::std::mem::align_of::<mexGlobalTableEntry_Tag>(),
        8usize,
        concat!("Alignment of ", stringify!(mexGlobalTableEntry_Tag))
    );
}
pub type mexGlobalTableEntry = mexGlobalTableEntry_Tag;
pub type mexGlobalTable = *mut mexGlobalTableEntry_Tag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mexFunctionTableEntry_tag {
    pub name: *const ::std::os::raw::c_char,
    pub f: mxFunctionPtr,
    pub nargin: ::std::os::raw::c_int,
    pub nargout: ::std::os::raw::c_int,
    pub local_function_table: *mut _mexLocalFunctionTable,
}
#[test]
fn bindgen_test_layout_mexFunctionTableEntry_tag() {
    assert_eq!(
        ::std::mem::size_of::<mexFunctionTableEntry_tag>(),
        32usize,
        concat!("Size of: ", stringify!(mexFunctionTableEntry_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<mexFunctionTableEntry_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(mexFunctionTableEntry_tag))
    );
}
pub type mexFunctionTableEntry = mexFunctionTableEntry_tag;
pub type mexFunctionTable = *mut mexFunctionTableEntry_tag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mexLocalFunctionTable {
    pub length: usize,
    pub entries: mexFunctionTable,
}
#[test]
fn bindgen_test_layout__mexLocalFunctionTable() {
    assert_eq!(
        ::std::mem::size_of::<_mexLocalFunctionTable>(),
        16usize,
        concat!("Size of: ", stringify!(_mexLocalFunctionTable))
    );
    assert_eq!(
        ::std::mem::align_of::<_mexLocalFunctionTable>(),
        8usize,
        concat!("Alignment of ", stringify!(_mexLocalFunctionTable))
    );
}
pub type mexLocalFunctionTable = *mut _mexLocalFunctionTable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mexInitTermTableEntry {
    pub initialize: ::std::option::Option<unsafe extern "C" fn()>,
    pub terminate: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout__mexInitTermTableEntry() {
    assert_eq!(
        ::std::mem::size_of::<_mexInitTermTableEntry>(),
        16usize,
        concat!("Size of: ", stringify!(_mexInitTermTableEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<_mexInitTermTableEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(_mexInitTermTableEntry))
    );
}
pub type mexInitTermTableEntry = *mut _mexInitTermTableEntry;
pub type fn_clean_up_after_error = ::std::option::Option<unsafe extern "C" fn()>;
pub type fn_simple_function_to_string =
    ::std::option::Option<unsafe extern "C" fn(f: mxFunctionPtr) -> *const ::std::os::raw::c_char>;
pub type fn_mex_get_local_function_table =
    ::std::option::Option<unsafe extern "C" fn() -> mexLocalFunctionTable>;
pub type fn_mex_set_local_function_table = ::std::option::Option<
    unsafe extern "C" fn(arg1: mexLocalFunctionTable) -> mexLocalFunctionTable,
>;
extern "C" {
    #[link_name = "\u{1}_Z11mexFunction"]
    pub fn mexFunction(
        nlhs: ::std::os::raw::c_int,
        plhs: *mut *mut mxArray,
        nrhs: ::std::os::raw::c_int,
        prhs: *mut *const mxArray,
    );
}
pub type FILE = _IO_FILE;
pub type __FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_jump_t {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(
        ::std::mem::size_of::<_IO_marker>(),
        24usize,
        concat!("Size of: ", stringify!(_IO_marker))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_marker>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_marker))
    );
}
pub const __codecvt_result___codecvt_ok: __codecvt_result = 0;
pub const __codecvt_result___codecvt_partial: __codecvt_result = 1;
pub const __codecvt_result___codecvt_error: __codecvt_result = 2;
pub const __codecvt_result___codecvt_noconv: __codecvt_result = 3;
pub type __codecvt_result = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE_plus {
    _unused: [u8; 0],
}
extern "C" {
    #[link_name = "\u{1}_Z14_IO_2_1_stdin_"]
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "\u{1}_Z15_IO_2_1_stdout_"]
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "\u{1}_Z15_IO_2_1_stderr_"]
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
}
pub type __io_read_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type __io_write_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> __ssize_t,
>;
pub type __io_seek_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type __io_close_fn = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
extern "C" {
    #[link_name = "\u{1}_Z11__underflow"]
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z7__uflow"]
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z10__overflow"]
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z8_IO_getc"]
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z8_IO_putc"]
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z8_IO_feof"]
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z10_IO_ferror"]
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z16_IO_peekc_locked"]
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z13_IO_flockfile"]
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    #[link_name = "\u{1}_Z15_IO_funlockfile"]
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    #[link_name = "\u{1}_Z16_IO_ftrylockfile"]
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z11_IO_vfscanf"]
    pub fn _IO_vfscanf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z12_IO_vfprintf"]
    pub fn _IO_vfprintf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z8_IO_padn"]
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int, arg3: __ssize_t)
        -> __ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_Z9_IO_sgetn"]
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void, arg3: usize) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_Z11_IO_seekoff"]
    pub fn _IO_seekoff(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    #[link_name = "\u{1}_Z11_IO_seekpos"]
    pub fn _IO_seekpos(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    #[link_name = "\u{1}_Z20_IO_free_backup_area"]
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
}
pub type fpos_t = _G_fpos_t;
extern "C" {
    #[link_name = "\u{1}_Z5stdin"]
    pub static mut stdin: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "\u{1}_Z6stdout"]
    pub static mut stdout: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "\u{1}_Z6stderr"]
    pub static mut stderr: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "\u{1}_Z6remove"]
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z6rename"]
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z8renameat"]
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z7tmpfile"]
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_Z6tmpnam"]
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z8tmpnam_r"]
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z7tempnam"]
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z6fclose"]
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z6fflush"]
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z15fflush_unlocked"]
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z5fopen"]
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_Z7freopen"]
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_Z6fdopen"]
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_Z8fmemopen"]
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_Z14open_memstream"]
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_Z6setbuf"]
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_Z7setvbuf"]
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z9setbuffer"]
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    #[link_name = "\u{1}_Z10setlinebuf"]
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    #[link_name = "\u{1}_Z7fprintf"]
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z6printf"]
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z7sprintf"]
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z8vfprintf"]
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z7vprintf"]
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z8vsprintf"]
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z8snprintf"]
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: usize,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z9vsnprintf"]
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: usize,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z8vdprintf"]
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z7dprintf"]
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z6fscanf"]
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z5scanf"]
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z6sscanf"]
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z7vfscanf"]
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z6vscanf"]
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z7vsscanf"]
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z5fgetc"]
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z4getc"]
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z7getchar"]
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z13getc_unlocked"]
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z16getchar_unlocked"]
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z14fgetc_unlocked"]
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z5fputc"]
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z4putc"]
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z7putchar"]
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z14fputc_unlocked"]
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z13putc_unlocked"]
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z16putchar_unlocked"]
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z4getw"]
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z4putw"]
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z5fgets"]
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z10__getdelim"]
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_Z8getdelim"]
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_Z7getline"]
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_Z5fputs"]
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z4puts"]
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z6ungetc"]
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z5fread"]
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_Z6fwrite"]
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __s: *mut FILE,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_Z14fread_unlocked"]
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_Z15fwrite_unlocked"]
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_Z5fseek"]
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z5ftell"]
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_Z6rewind"]
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    #[link_name = "\u{1}_Z6fseeko"]
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z6ftello"]
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    #[link_name = "\u{1}_Z7fgetpos"]
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z7fsetpos"]
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z8clearerr"]
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    #[link_name = "\u{1}_Z4feof"]
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z6ferror"]
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z17clearerr_unlocked"]
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    #[link_name = "\u{1}_Z13feof_unlocked"]
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z15ferror_unlocked"]
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z6perror"]
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_Z8sys_nerr"]
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z11sys_errlist"]
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    #[link_name = "\u{1}_Z6fileno"]
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z15fileno_unlocked"]
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z5popen"]
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_Z6pclose"]
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z7ctermid"]
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z9flockfile"]
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    #[link_name = "\u{1}_Z12ftrylockfile"]
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z11funlockfile"]
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    #[link_name = "\u{1}_Z12mexErrMsgTxt"]
    pub fn mexErrMsgTxt(error_msg: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_Z17mexErrMsgIdAndTxt"]
    pub fn mexErrMsgIdAndTxt(
        identifier: *const ::std::os::raw::c_char,
        err_msg: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[link_name = "\u{1}_Z13mexWarnMsgTxt"]
    pub fn mexWarnMsgTxt(warn_msg: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_Z18mexWarnMsgIdAndTxt"]
    pub fn mexWarnMsgIdAndTxt(
        identifier: *const ::std::os::raw::c_char,
        warn_msg: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[link_name = "\u{1}_Z9mexPrintf"]
    pub fn mexPrintf(fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z22mexMakeArrayPersistent"]
    pub fn mexMakeArrayPersistent(pa: *mut mxArray);
}
extern "C" {
    #[link_name = "\u{1}_Z23mexMakeMemoryPersistent"]
    pub fn mexMakeMemoryPersistent(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_Z13mexCallMATLAB"]
    pub fn mexCallMATLAB(
        nlhs: ::std::os::raw::c_int,
        plhs: *mut *mut mxArray,
        nrhs: ::std::os::raw::c_int,
        prhs: *mut *mut mxArray,
        fcn_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z23mexCallMATLABWithObject"]
    pub fn mexCallMATLABWithObject(
        nlhs: ::std::os::raw::c_int,
        plhs: *mut *mut mxArray,
        nrhs: ::std::os::raw::c_int,
        prhs: *mut *mut mxArray,
        fcn_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z21mexCallMATLABWithTrap"]
    pub fn mexCallMATLABWithTrap(
        nlhs: ::std::os::raw::c_int,
        plhs: *mut *mut mxArray,
        nrhs: ::std::os::raw::c_int,
        prhs: *mut *mut mxArray,
        fcn_name: *const ::std::os::raw::c_char,
    ) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z31mexCallMATLABWithTrapWithObject"]
    pub fn mexCallMATLABWithTrapWithObject(
        nlhs: ::std::os::raw::c_int,
        plhs: *mut *mut mxArray,
        nrhs: ::std::os::raw::c_int,
        prhs: *mut *mut mxArray,
        fcn_name: *const ::std::os::raw::c_char,
    ) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z14mexSetTrapFlag"]
    pub fn mexSetTrapFlag(flag: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_Z17mexPrintAssertion"]
    pub fn mexPrintAssertion(
        test: *const ::std::os::raw::c_char,
        fname: *const ::std::os::raw::c_char,
        linenum: ::std::os::raw::c_int,
        message: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z11mexIsGlobal"]
    pub fn mexIsGlobal(pA: *const mxArray) -> bool_;
}
extern "C" {
    #[link_name = "\u{1}_Z14mexPutVariable"]
    pub fn mexPutVariable(
        workspace: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        parray: *const mxArray,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z17mexGetVariablePtr"]
    pub fn mexGetVariablePtr(
        workspace: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    ) -> *const mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z24mexGetVariableWithObject"]
    pub fn mexGetVariableWithObject(
        workspace: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    ) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z7mexLock"]
    pub fn mexLock();
}
extern "C" {
    #[link_name = "\u{1}_Z9mexUnlock"]
    pub fn mexUnlock();
}
extern "C" {
    #[link_name = "\u{1}_Z11mexIsLocked"]
    pub fn mexIsLocked() -> bool_;
}
extern "C" {
    #[link_name = "\u{1}_Z15mexFunctionName"]
    pub fn mexFunctionName() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z13mexEvalString"]
    pub fn mexEvalString(str: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z21mexEvalStringWithTrap"]
    pub fn mexEvalStringWithTrap(str: *const ::std::os::raw::c_char) -> *mut mxArray;
}
extern "C" {
    #[link_name = "\u{1}_Z9mexAtExit"]
    pub fn mexAtExit(exit_fcn: mex_exit_fn) -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
}
